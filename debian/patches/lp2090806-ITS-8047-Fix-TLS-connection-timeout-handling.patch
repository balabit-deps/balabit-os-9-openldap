commit d143f7a2dc82fb66e7741b93a1ae9e874ce2ac46
From: Ondřej Kuzník <ondra@mistotebe.net>
Date: Mon, 21 Oct 2024 11:50:11 +0100
Subject: ITS#8047 Fix TLS connection timeout handling
 The test for async in ldap_int_tls_start was inverted, we already
 support calling ldap_int_tls_connect repeatedly. And so long as
 LBER_SB_OPT_NEEDS_* are managed correctly, the application should be
 able to do the right thing.
 
 Might require a new result code rather than reporposing
 LDAP_X_CONNECTING for this.
Bug-Ubuntu: https://bugs.launchpad.net/bugs/2090806
Bug: https://bugs.openldap.org/show_bug.cgi?id=8047
Origin: backport, https://git.openldap.org/openldap/openldap/-/commit/d143f7a2dc82fb66e7741b93a1ae9e874ce2ac46
Last-Update: 2024-12-09

Index: openldap-2.5.18+dfsg/libraries/libldap/ldap-int.h
===================================================================
--- openldap-2.5.18+dfsg.orig/libraries/libldap/ldap-int.h	2024-12-09 15:54:00.836511687 +1300
+++ openldap-2.5.18+dfsg/libraries/libldap/ldap-int.h	2024-12-09 15:54:00.832511634 +1300
@@ -368,6 +368,7 @@
 #define LDAP_CONNST_NEEDSOCKET		1
 #define LDAP_CONNST_CONNECTING		2
 #define LDAP_CONNST_CONNECTED		3
+#define LDAP_CONNST_TLS_INPROGRESS	4
 	LDAPURLDesc		*lconn_server;
 	BerElement		*lconn_ber;	/* ber receiving on this conn. */
 
Index: openldap-2.5.18+dfsg/libraries/libldap/tls2.c
===================================================================
--- openldap-2.5.18+dfsg.orig/libraries/libldap/tls2.c	2024-12-09 15:54:00.836511687 +1300
+++ openldap-2.5.18+dfsg/libraries/libldap/tls2.c	2024-12-09 15:54:00.833511647 +1300
@@ -378,6 +378,7 @@
 		if ( lo && lo->ldo_tls_connect_cb && lo->ldo_tls_connect_cb !=
 			ld->ld_options.ldo_tls_connect_cb )
 			lo->ldo_tls_connect_cb( ld, ssl, ctx, lo->ldo_tls_connect_arg );
+		conn->lconn_status = LDAP_CONNST_TLS_INPROGRESS;
 	}
 
 	/* pass hostname for SNI, but only if it's an actual name
@@ -436,9 +437,11 @@
 		ber_sockbuf_remove_io( sb, &ber_sockbuf_io_debug,
 			LBER_SBIOD_LEVEL_TRANSPORT );
 #endif
+		conn->lconn_status = LDAP_CONNST_CONNECTED;
 		return -1;
 	}
 
+	conn->lconn_status = LDAP_CONNST_CONNECTED;
 	return 0;
 }
 
@@ -511,8 +514,9 @@
 ldap_tls_inplace( LDAP *ld )
 {
 	Sockbuf		*sb = NULL;
+	LDAPConn	*lc = ld->ld_defconn;
 
-	if ( ld->ld_defconn && ld->ld_defconn->lconn_sb ) {
+	if ( lc && lc->lconn_sb ) {
 		sb = ld->ld_defconn->lconn_sb;
 
 	} else if ( ld->ld_sb ) {
@@ -522,6 +526,10 @@
 		return 0;
 	}
 
+	if ( lc && lc->lconn_status == LDAP_CONNST_TLS_INPROGRESS ) {
+		return 0;
+	}
+
 	return ldap_pvt_tls_inplace( sb );
 }
 
@@ -1144,6 +1152,9 @@
 	  */
 	while ( ret > 0 ) {
 		if ( async ) {
+			ld->ld_errno = LDAP_X_CONNECTING;
+			return (ld->ld_errno);
+		} else {
 			struct timeval curr_time_tv, delta_tv;
 			int wr=0;
 
@@ -1202,6 +1213,11 @@
 		ret = ldap_int_tls_connect( ld, conn, host );
 	}
 
+	if ( !async && ld->ld_options.ldo_tm_net.tv_sec >= 0 ) {
+		/* Restore original sb status */
+		ber_sockbuf_ctrl( sb, LBER_SB_OPT_SET_NONBLOCK, (void*)0 );
+	}
+
 	if ( ret < 0 ) {
 		if ( ld->ld_errno == LDAP_SUCCESS )
 			ld->ld_errno = LDAP_CONNECT_ERROR;
